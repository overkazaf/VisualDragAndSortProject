//smartMenu重构

//采用策略模式分发不同的右击请求

/**
 * /
 * @param  {[type]} mode [编辑或添加]
 * @param  {[type]} el   [当前元素]
 * @param  {[type]} elemId   [当前元素id或父容器id]
 * @return {[type]}      [返回一个供 ModalDialog 渲染的json]
 */
function constructConfigPanel(mode, el, elemId){
	return constructStrategies[mode](el, elemId);
}

//参数配置面板构建的策略
var constructStrategies = {
	'edit' : function (el, elId){
		var target = el, // 右击对象
			obj = $('#' + elId), // 父容器或当前对象
			operable = target.attr('operable'); // 当前对象有没有operable属性？
		
		return operable ? operableStrategies[operable](el, elId) : operableStrategies[obj.attr('operable')](el, elId);

	},

	'add' : function (el, elId){

		return {
			body : '',
			footer : '',
			fnOK : {

			}
		};
	}
};

//不同操作对象的构建策略
var operableStrategies = {
	'text,href' : function (el, elId){

	},

	'flash' : function (el, elId){
		var param = el.attr('data-widget-param');
			config = param ? el.attr('data-history-config') : null;

		
	}
};

//部件的特性配置策略，分为新配置面板和历史配置面板
var widgetAttrStrategies = {
	'history' : function (){

	},
	'basic' : function (){

	}
};

//部件的基本配置策略，分为新配置面板和历史配置面板
var baseStrategies = {
	'history' : function (params, jsonData){
		//根据历史参数配置返回配置面板html
		var fragment = '';


		return fragment;
	},
	'basic' : function (params){
		//根据需要配置的参数返回相应的配置面板html
		var fragment = '';


		return fragment;
	}
};

function writeCache ($obj, cachedObj) {
	return $obj.attr('data-cache', JSON.stringify(cachedObj));
}